// Import prepended by scripts/add-imports-to-typeshare.ts
import {
  ActionHash,
  AgentPubKey,
  Record,
  Signature,
  ZomeIndex,
  LinkTag,
  LinkType,
  AnyLinkableHash,
} from "@holochain/client";
import { EthAddress, EntryDefIndex, SerializedBytes } from "./dependency-types";
/*
 Generated by typeshare 1.9.2
*/

/** A key-value pair, representing an item of a user's metadata */
export interface MetadataItem {
  name: string;
  value: string;
}

/** Input to the `create_app_entry_raw` function */
export interface CreateAppEntryRawInput {
  /** The index of the zome that defines the entry type */
  zome_index: ZomeIndex;
  /** The index of the entry definition within the zome */
  entry_def_index: EntryDefIndex;
  /** The msgpack serialised app entry content */
  entry_bytes: SerializedBytes;
}

/** Input to the `create_link_raw` function */
export interface CreateLinkRawInput {
  /** The 'form' address of the link */
  base_address: AnyLinkableHash;
  /** The 'to' address of the link */
  target_address: AnyLinkableHash;
  /** The index of the zome in which the link was defined */
  zome_index: ZomeIndex;
  /** The index of the link definition within the zome */
  link_type: LinkType;
  /** Freeform data attached to the link */
  tag: LinkTag;
}

/** The input argument to `update_metadata_item`` */
export interface UpdateMetadataItemInput {
  /**
   * This has to be set to your own key. The only reason this field isn't
   * instead inferred is for the sake of enabling testing of the fail case.
   */
  agent_pubkey: AgentPubKey;
  /** The key for the particular metadata item */
  name: string;
  /** The value to assign to the key */
  value: string;
}

/** The input argument to `get_metadata_item_value`` */
export interface GetMetadataItemValueInput {
  /** The agent whose metadata you wish to query */
  agent_pubkey: AgentPubKey;
  /** The key for the particular metadata item */
  name: string;
}

/** Reasons for which a create `AgentMetadata` link action can fail validation. */
export enum CreateAgentMetadataLinkRejectionReason {
  /**
   * The base address is the agent pubkey of the user who is being annotated with metadata.
   * As a user can only author their own metadata, the base address has match their own pubkey.
   */
  BaseAddressMustBeOwner = "BaseAddressMustBeOwner",
  /** The link tag content doesn't match the expected key-value schema struct `MetadataItem`. */
  BadTagSerialization = "BadTagSerialization",
}

/** Reasons for which a delete `AgentMetadata` link action can fail validation. */
export enum DeleteAgentMetadataLinkRejectionReason {
  /**
   * The user attempting to delete the metadata item is not the owner and therefore doesn't
   * have permission.
   */
  DeleterIsNotOwner = "DeleterIsNotOwner",
}

export type ValidationRejectionDetail =
  | {
      type: "CreateAgentMetadataLinkRejectionReasons";
      reasons: CreateAgentMetadataLinkRejectionReason[];
    }
  | {
      type: "DeleteAgentMetadataLinkRejectionReasons";
      reasons: DeleteAgentMetadataLinkRejectionReason[];
    };
